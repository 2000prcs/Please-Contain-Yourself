1-Installation:
- disclaimer: mac users you should be familiar with working in the teminal, git/version control, servers/ports, ect. add more as the come up 
- Download docker https://www.docker.com/products/docker
 - click on the whale and complete installation
- check docker version commands
- docker info
- hello world container
- explain the warning, explain to wait and where the image came from
- let them know that if they dont see the succesful pulldown message that something went wrong and to try again
- explain what a dockerflie, image, and container is and the differences
- docker info again
- show the docker images on your machine
- show all the containers on your machine, use docker ps and show that you need to use ps -a, talk about how hello world is a short lived container
- spin up a bunch of hello world containers, show that they went through their lifecycle by showing the containers again 
- talk about how names are randomly assigned but well see how to assign names later
- give one a name with --name punk_unicorns, show it with ps -a
- show that there is still only one image

- spin up a nginx webserver "docker run -d -p 80:80 --name webserver nginx", will explain what the other flags do later (but have a picture anyways)
(with out the -d flag it shows logging but you cant escape without ctrl+C, once you exit tho, you can restart it and it behaves normally)
- show that ps shows running ones with details
- go to local host
- docker stop webserver, not in ps any more but can find it in ps -a
- you can restart it by going docker start with either the name or the container id (same goes with stopping)
- if you want to remove a stopped container, docker rm <container-name>
- if you want to remove a running container without stopping it first use docker rm -f <>
- still have both images locally (show that with docker images), if you needed to remove them you would go:
docker rmi <image-name>
- THIS WILL FAIL because there are still containers that reference the immage even though they are stopped
- remove all the hello world containers that have reached the end of thier lifecycle and stopped by docker rm <container-name> <container-name> <container-name>
- try to remove the hello world image again. check thats its gone with docker images
-that being said, if you dont want to clean up after yourself you can just go docker rmi -f <image-name> but you should really clean up after yourself, no one else is going to keep your computer clean
- finally, remove the nginx image
DONE


2-Bundle_Your_App
- BUILD an image using the helloServer+random number without first starting it
- explain the layering and the setup of the dockerfile some more
- spin up one with a name tag tag, see it running in the teminal, visit it in browser, take note of its random number
- explain how to stop it and restart it (access it with its name tag) AND map to a port
- spin up another one and show that the random number is different
- talk about lifecycle and statelessnes
- dont remove it, we'll be using it a bit later

- explain how to destroy the containers, show that they are destoyed in teminal?
(unless you already want the previous one running to build an image from it)
- BUILD an image with an already going server
- restart it and show that it will be the same random number each time
- explain how all pointers are preserves in the image 
- then maybe talk about destroying containers and show it on docker info

- spin up a bunch of (pure) hello servers, all mapped to different ports
- visit all these ports and show that they are all different random numbers
- show this effect on "docker info"
- take them all down
- point out that that was a bit of a pain, Docker has tools to make managing lots of containers like we just did a piece of cake

3-Containerized Development with Volumes
- what is a volume
- why is this useful
- bundle it into an image once youre happy with it
- push it to dockerhub (all that setup jazz), talk about how it has version control for images
- remove the image from your computer
- pull it down from dockerhub and run it

4-Make multiple containers work together
- will I need to expand on volumes
- do you use volumes to share date between containers or nah?
- 
- 
- 

5-Docker Compose for multicontainer apps
- 
- 
- 
- 
- 

6-docker_swarm_for_scaling
- Do what that guy do with the hello container
- have them download your image that spins up a server of something unique each time
- have them swarm it and them visit the page and refreash several times to demonstrate the automatic load balancing
- 
- 
